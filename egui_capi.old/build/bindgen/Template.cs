
namespace Vortex.Gui;

/// <summary>
/// Tracks which items have been autogenerated. This makes it easier to identify
/// which classes and methods must be bound by hand.
/// </summary>
internal static class AutogenStatistics {
    /// <summary>
    /// The list of all GUI items that must be bound for the GUI library to be complete.
    /// </summary>
    private static readonly IImmutableList<string> Items = __ITEM_NAMES__;

    /// <summary>
    /// Writes a report to the console describing which items still need to be bound.
    /// </summary>
    public static void PrintStatistics() {
        var boundItems = 0;
        foreach (var item in Items) {
            if (ItemExists(item)) {
                boundItems++;
            }
            else {
                Console.WriteLine(item);
            }
        }
        var boundPercent = MathF.Floor(100.0f * (float)boundItems / (float)Items.Length);

        Console.WriteLine("====================");
        Console.WriteLine($"{boundItems}/{Items.Length} ({boundPercent}%) members bound");
    }

    /// <summary>
    /// Determines whether the given item is defined.
    /// The item name may either be a type name of format <c>TypeName> or
    /// a member name of format <c>TypeName.FieldOrMethodName</c>.
    /// </summary>
    /// <param name="name">The name to query.</param>
    /// <return><c>true</c> if and only if the member was defined.</return>
    private static bool ItemExists(string name) {
        var parts = name.Split(".");

        if (parts.Length == 1) {
            return Type.GetType(parts[0]) != null;
        }
        else if (parts.Length == 2) {
            var ty = Type.GetType(parts[0]);
            return ty.GetMember(parts[1]) != null;
        }
        else {
            throw new ArgumentException($"Member name {name} was not properly formatted");
        }
    }
}

__ITEMS__