use convert_case::*;
use egui::*;
use egui::Id;
use egui::output::*;
use egui::panel::*;
use egui::scroll_area::*;
use egui::style::*;
use egui::text::*;
use egui::text_edit::*;
use egui::text_selection::*;
use egui::util::undoer::*;
use rustdoc_types::*;
use rustdoc_types::Id as RdId;
use serde_generate::*;
use serde_generate::csharp::*;
use serde_reflection::*;
use std::borrow::*;
use std::path::*;

include!(concat!(env!("OUT_DIR"), "/tracer.rs"));

/// Holds context for use during bindings generation.
pub struct BindingsGenerator {
    /// Metadata about the crate being generated.
    krate: Crate,
    /// The output path to which data will be written.
    output_path: PathBuf,
    /// A registry of reflected information about `egui` types.
    registry: Registry
}

impl BindingsGenerator {
    /// Creates autogenerated bindings for all `serde` types.
    pub fn generate(path: &std::path::Path) {
        BindingsGenerator {
            krate: serde_json::from_str::<Crate>(include_str!("egui.json")).expect("Failed to parse egui"),
            output_path: path.to_path_buf(),
            registry: Self::trace_serde_types()
        }.run()
    }

    /// Executes the bindings generator.
    fn run(mut self) {
        let path_to_clear = self.output_path.join("Egui");
        let _ = std::fs::remove_dir_all(path_to_clear);

        let config = CodeGeneratorConfig::new("Egui".to_string())
            .with_serialization(true)
            .with_c_style_enums(true)
            .with_comments(self.gather_doc_comments());
        let generator = CodeGenerator::new(&config);

        self.emit_fn_enum();
        self.rename_struct_fields();
        
        generator.write_source_files(self.output_path, &self.registry).expect("Failed to write source files");
    }

    /// Emits an `enum` containing the names of all public `egui` functions.
    fn emit_fn_enum(&self) {
        let variants = self.fn_enum_variant_names();
        let mut result = String::new();
        
        result += "#[derive(Clone, Copy)]\n";
        result += "#[repr(C)]\n";
        result += "pub enum EguiFn {\n    ";
        result += &variants.join(",\n    ").trim();
        result += "}\n";

        result += "impl EguiFn {\n";
        result += "    /// All enum variants.\n";
        result += "    pub const ALL: &[Self] = &[\n    ";
        result += &variants.iter().map(|x| "Self::".to_string() + x).collect::<Vec<_>>().join(",\n    ").trim();
        result += "    ];\n";
        result += "}\n";

        std::fs::write(self.output_path.join("egui_fn.rs"), result).expect("Failed to write egui function enum");
    }

    /// Gets the variant names for an `enum` containing all public `egui` functions.
    fn fn_enum_variant_names(&self) -> Vec<String> {
        let mut result = Vec::new();
        for id in self.gather_fns() {
            if let Some(impl_ty) = self.declaring_type(id) {
                result.push(format!("{}_{}", self.krate.paths[&impl_ty].path.join("_"), self.krate.index[&id].name.clone().unwrap_or_default()));
            }
            else if self.krate.paths.contains_key(&id) {
                result.push(format!("{}", self.krate.paths[&id].path.join("_")));
            }
        }
        result.sort();
        result
    }

    /// Gets all doc-comments to emit for types and fields.
    fn gather_doc_comments(&self) -> DocComments {
        let mut result = DocComments::default();
        for name in self.registry.keys() {
            if let Some(id) = self.get_type_id(name) {
                if let Some(docs) = self.get_doc_comment(id) {
                    result.insert(vec!["Egui".to_string(), name.clone()], docs);
                }

                let fields = match &self.krate.index[&id].inner {
                    ItemEnum::Struct(Struct { kind: StructKind::Plain { fields, .. }, .. }) => &**fields,
                    ItemEnum::Enum(Enum { variants, .. }) => &**variants,
                    _ => &[]
                };

                for field in fields {
                    let field_name = self.krate.index[field].name.clone().unwrap_or_default();
                    if let Some(docs) = self.get_doc_comment(*field) {
                        result.insert(vec!["Egui".to_string(), name.clone(), field_name.to_case(Case::Pascal)], docs);
                    }
                }
            }
        }
        result
    }

    /// Gets a list of all functions that should be bound for `egui`.
    fn gather_fns(&self) -> Vec<RdId> {
        self.krate.index.iter()
            .filter_map(|(id, item)| (item.crate_id == 0 && matches!(item.inner, ItemEnum::Function(_))).then_some(id.clone()))
            .collect()
    }

    /// Gets the ID of the type that declares the given function.
    fn declaring_type(&self, fn_id: RdId) -> Option<RdId> {
        self.krate.index.values()
            .filter_map(|item| if let ItemEnum::Impl(Impl { for_: Type::ResolvedPath(p), items, .. }) = &item.inner {
                items.contains(&fn_id).then_some(p.id)
            }
            else {
                None
            })
            .next()
    }
    
    /// Renames all fields in the registry from Rust to C# casing.
    fn rename_struct_fields(&mut self) {
        for item in self.registry.values_mut() {
            match item {
                ContainerFormat::Struct(nameds) => for field in nameds {
                    field.name = field.name.to_case(Case::Pascal);
                },
                _ => {},
            }
        }
    }
    
    /// Gets the C# doc-comment to use for an item given its ID.
    fn get_doc_comment(&self, id: RdId) -> Option<String> {
        let docs = self.krate.index[&id].docs.clone().unwrap_or_default();
        let converted_docs = Self::inline_code_to_cs(&Self::strip_links(&Self::strip_code_comments(docs.trim_end())));
        if converted_docs.is_empty() {
            None
        }
        else {
            Some(format!("<summary>\n{converted_docs}\n</summary>"))
        }
    }
    
    /// Gets the `rustdoc` ID for a type given its name.
    fn get_type_id(&self, name: &str) -> Option<RdId> {
        self.krate.index.iter()
            .filter_map(|(id, item)| (matches!(item.inner, ItemEnum::Enum(_) | ItemEnum::Struct(_)) && item.name.as_deref() == Some(name)).then_some(id.clone()))
            .next()
    }

    /// Performs reflection on `egui` types to determine fields.
    fn trace_serde_types() -> Registry {
        let mut samples = Samples::new();
        let mut tracer = Tracer::new(TracerConfig::default()
            .default_u64_value(1)
            .record_samples_for_newtype_structs(true)
            .record_samples_for_tuple_structs(true)
            .record_samples_for_structs(true));

        trace_auto_serde_types(&mut tracer);

        tracer.trace_value(&mut samples, &Options::default()).expect("Failed to trace Options");
        tracer.trace_value(&mut samples, &UserData::default()).expect("Failed to trace UserData");
        
        tracer.trace_simple_type::<Align>().expect("Failed to trace Align");
        tracer.trace_simple_type::<FontFamily>().expect("Failed to trace FontFamily");
        tracer.trace_simple_type::<TextWrapMode>().expect("Failed to trace TextWrapMode");

        tracer.registry().expect("Failed to generate serde registry")
    }

    /// Removes all code examples from the given documentation string.
    fn strip_code_comments(docs: &str) -> String {
        let mut result = Cow::Borrowed(docs);
        while let Some(index) = result.find("```") {
            let base_offset = index + "```".len();
            if let Some(remaining) = result[base_offset..].find("```") {
                result = Cow::Owned(result[..index].trim_end().to_owned() + result[base_offset + remaining + "```".len()..].trim_start());
            }
            else {
                break;
            }
        }
        
        result.trim().to_string()
    }

    /// Removes all links from the given documentation string.
    fn strip_links(docs: &str) -> String {
        let mut result = Cow::Borrowed(docs);
        while let Some(index) = result.find("[") {
            let base_offset = index + "[".len();
            if let Some(remaining) = result[base_offset..].find("]") {
                let inner_text = result[base_offset..base_offset + remaining].to_string();
                let rest_begin = base_offset + remaining + "]".len();
                let final_offset = if result[rest_begin..].starts_with("(") {
                    rest_begin + result[rest_begin..].find(")").expect("Malformatted documentation link") + ")".len()
                }
                else {
                    rest_begin
                };

                result = Cow::Owned(result[..index].to_owned() + &inner_text + &result[final_offset..]);
            }
            else {
                break;
            }
        }
        
        result.trim().to_string()
    }

    /// Removes everything before the last instance of `ending` in `value`.
    fn strip_prefix_with_ending(value: &str, ending: &str) -> String {
        let mut start_pos = 0;
        while let Some(prefix) = value[start_pos..].find(ending) {
            start_pos = start_pos + prefix + ending.len();
        }
        value[start_pos..].to_string()
    }

    /// Converts all inline code snippets to their C# equivalent.
    fn inline_code_to_cs(docs: &str) -> String {
        let mut result = Cow::Borrowed(docs);
        while let Some(index) = result.find("`") {
            let base_offset = index + "`".len();
            if let Some(remaining) = result[base_offset..].find("`") {
                let end_offset = base_offset + remaining + "`".len();

                result = Cow::Owned(result[..index].to_owned()
                    + "<c>" + &Self::strip_prefix_with_ending(&result[base_offset..base_offset + remaining], "::").to_case(Case::Pascal) + "</c>"
                    + &result[end_offset..]);
            }
            else {
                break;
            }
        }
        
        result.trim().to_string()
    }
}