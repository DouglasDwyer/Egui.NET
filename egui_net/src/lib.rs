#![allow(warnings)]

#![feature(thread_local)]

use egui::*;
use egui::emath::*;
use egui::emath::*;
use egui::epaint::*;
use egui::epaint::tessellator::*;
use egui::epaint::text::*;
use egui::epaint::text::cursor::*;
use egui::Id;
use egui::collapsing_header::*;
use egui::containers::*;
use egui::containers::menu::*;
use egui::os::*;
use egui::output::*;
use egui::panel::*;
use egui::scroll_area::*;
use egui::style::*;
use egui::text::*;
use egui::text_edit::*;
use egui::text_selection::*;
use egui::util::undoer::*;
use serde::*;
use serde::de::*;
use std::borrow::*;
use std::collections::*;
use std::mem::*;
use std::ops::*;
use std::time::*;
use std::panic;
use std::panic::catch_unwind;
use std::sync::*;

include!(concat!(env!("CARGO_MANIFEST_DIR"), "/../target/bindings/egui_fn.rs"));

/// A registry containing all `egui` functions callable from C#.
const EGUI_FNS: EguiFnMap = AUTOGENERATED_EGUI_FNS
    // Bindings for Context
    .with(EguiFn::egui_context_Context_default, (|| EguiHandle::to_heap(Context::default())) as fn() -> _)
    .with_byref(EguiFn::egui_context_Context_request_discard, (|ctx: &Context, x: String| ctx.request_discard(x)) as fn(&_, _) -> _)
    // Bindings for Sense
    .with(EguiFn::egui_sense_Sense_interactive, (|x: u8| Sense::from_bits_truncate(x).interactive()) as fn(_) -> _)
    .with(EguiFn::egui_sense_Sense_senses_click, (|x: u8| Sense::from_bits_truncate(x).senses_click()) as fn(_) -> _)
    .with(EguiFn::egui_sense_Sense_senses_drag, (|x: u8| Sense::from_bits_truncate(x).senses_drag()) as fn(_) -> _)
    .with(EguiFn::egui_sense_Sense_is_focusable, (|x: u8| Sense::from_bits_truncate(x).is_focusable()) as fn(_) -> _);

/// Represents a heap-allocated `egui` object.
#[derive(Copy, Clone, Serialize, Deserialize)]
#[repr(C)]
pub struct EguiHandle {
    /// A pointer to the object.
    ptr: usize,
    /// Metadata about the pointer used for internal purposes.
    metadata: usize
}

impl EguiHandle {
    /// Allocates `value` on the heap and returns a handle to it.
    pub fn to_heap<T: 'static>(value: T) -> Self {
        let ptr = Box::into_raw(Box::new(value)) as usize;
        let metadata = std::ptr::drop_in_place::<T> as usize;
        Self {
            ptr,
            metadata
        }
    }
}

/*
#[derive(Copy, Clone, Serialize, Deserialize)]
#[repr(C)]
pub struct EguiPtr<T> {
    ptr: usize,
    
}

impl<T> EguiPtr<T> {
    pub unsafe fn get(&self) 0
} 
*/

/// Describes the result of an `egui` call.
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EguiInvokeResult {
    /// Whether `return_value` holds a serialized value or an error string.
    pub success: bool,
    /// If [`Self::success`], then the serialized data that the function returned.
    /// Otherwise, holds a UTF8 string describing what went wrong.
    pub return_value: EguiSliceU8
}

/// Describes a section of a `u8` array.
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EguiSliceU8 {
    /// A pointer to the data buffer.
    pub ptr: *const u8,
    /// The length of the data in bytes.
    pub len: usize
}

impl EguiSliceU8 {
    /// Converts `x` to an FFI-compatible slice.
    /// 
    /// # Safety
    /// 
    /// The lifetime of the returned slice should not outlive `x`. 
    pub const fn from_slice(x: &[u8]) -> Self {
        Self {
            ptr: x.as_ptr(),
            len: x.len()
        }
    }

    /// Converts this object to a Rust slice.
    /// 
    /// # Safety
    /// 
    /// For this function call to be sound, `self` must refer
    /// to a valid array of `u8` with at least [`Self::len`] elements.
    pub unsafe fn to_slice(&self) -> &[u8] {
        if self.len == 0 {
            &[]
        }
        else {
            std::slice::from_raw_parts(self.ptr, self.len)
        }
    }
}

/// Initializes the `egui` bindings library.
#[no_mangle]
pub unsafe extern "C" fn egui_init() {
    panic::set_hook(Box::new(|_| ()));
}

#[no_mangle]
pub unsafe extern "C" fn egui_invoke(f: EguiFn, ptr: usize, args: EguiSliceU8) -> EguiInvokeResult {
    /// The serialization buffer to which results will be written.
    #[thread_local]
    static mut RETURN_BUFFER: Vec<u8> = Vec::new();

    match catch_unwind(|| {
        let return_buffer = &mut *std::ptr::addr_of_mut!(RETURN_BUFFER);
        if let Some(invoker) = EGUI_FNS.inner[f as usize] {
            return_buffer.clear();
            invoker.invoke(ptr as *mut _, args.to_slice(), return_buffer);
            EguiInvokeResult {
                success: true,
                return_value: EguiSliceU8::from_slice(&return_buffer)
            }
        }
        else {
            panic!("Function {f:?} not implemented")
        }
    }) {
        Ok(x) => x,
        Err(error) => {
            let error_message = error.downcast_ref::<&'static str>()
                .map(|x| x.to_string())
                .unwrap_or_else(|| error.downcast_ref::<String>().cloned().unwrap_or_default());
            
            let return_buffer = &mut *std::ptr::addr_of_mut!(RETURN_BUFFER);
            return_buffer.clear();
            for character in error_message.encode_utf16() {
                return_buffer.extend(character.to_ne_bytes());
            }

            EguiInvokeResult {
                success: false,
                return_value: EguiSliceU8::from_slice(&return_buffer)
            }
        }
    }
}

/// Frees an `egui` object from the heap.
#[no_mangle]
pub unsafe extern "C" fn egui_drop(handle: EguiHandle) {
    transmute::<_, unsafe fn(usize)>(handle.metadata)(handle.ptr)
}

/// Holds bindings for all `egui` functions and allows for translating from [`EguiFn`] names to function pointers.
struct EguiFnMap {
    /// A mapping from [`EguiFn`] bindings to the underlying function to invoke.
    inner: [Option<EguiFnInvoker>; EguiFn::ALL.len()]
}

impl EguiFnMap {
    /// Adds a function (that has call-by-value semantics) and returns the new map.
    pub const fn with(mut self, binding: EguiFn, f: impl EguiFnInvokable) -> Self {
        self.inner[binding as usize] = Some(EguiFnInvoker::new(f));
        self
    }

    /// Adds a function (that has call-by-reference semantics) and returns the new map.
    pub const fn with_byref(mut self, binding: EguiFn, f: impl EguiFnRefInvokable) -> Self {
        self.inner[binding as usize] = Some(EguiFnInvoker::new_byref(f));
        self
    }
}

/// Creates a new, empty function map.
const fn egui_fn_map() -> EguiFnMap {
    EguiFnMap {
        inner: [None; EguiFn::ALL.len()]
    }
}

/// A type-erased `egui` function that may be called with serialized arguments/result.
#[derive(Copy, Clone, Debug)]
struct EguiFnInvoker {
    /// The `fn` object to pass to `func`.
    data: *const (),
    /// The [`EguiFnInvokable::invoke`] method to call.
    func: unsafe fn(*const (), *mut (), &[u8], &mut Vec<u8>)
}

impl EguiFnInvoker {
    /// Stores the provided [`EguiFnInvokable`] on the stack for later use.
    /// `F` should be a `fn` pointer.
    pub const fn new<F: EguiFnInvokable>(f: F) -> Self {
        unsafe {
            if size_of::<F>() != size_of::<*const ()>() {
                panic!("Invokable function must be thin pointer");
            }

            Self {
                data: std::ptr::read(&f as *const _ as *const _),
                func: transmute(F::invoke as unsafe fn(_, _, _, _))
            }
        }
    }

    /// Stores the provided [`EguiFnRefInvokable`] on the stack for later use.
    /// `F` should be a `fn` pointer.
    pub const fn new_byref<F: EguiFnRefInvokable>(f: F) -> Self {
        unsafe {
            if size_of::<F>() != size_of::<*const ()>() {
                panic!("Invokable function must be thin pointer");
            }

            Self {
                data: std::ptr::read(&f as *const _ as *const _),
                func: transmute(F::invoke as unsafe fn(_, _, _, _))
            }
        }
    }

    /// Invokes the underlying function.
    /// 
    /// # Safety
    /// 
    /// For this function call to be sound, `ptr` must refer to a valid instance
    /// of the invoker function's type.
    pub unsafe fn invoke(&self, ptr: *mut (), args: &[u8], ret: &mut Vec<u8>) {
        (self.func)(&self.data as *const _ as *const _, ptr, args, ret)
    }
}

trait EguiFnInvokable: 'static + Copy + Send + Sync {
    unsafe fn invoke(&self, ptr: *mut (), args: &[u8], ret: &mut Vec<u8>);
}

trait EguiFnRefInvokable: 'static + Copy + Send + Sync {
    unsafe fn invoke(&self, ptr: *mut (), args: &[u8], ret: &mut Vec<u8>);
}

impl<T: 'static + Copy + Send + Sync + CallBorrow> EguiFnInvokable for T
where T::Input: 'static + DeserializeOwned, T::Output: Serialize
{
    unsafe fn invoke(&self, ptr: *mut (), args: &[u8], ret: &mut Vec<u8>) {
        assert!(ptr.is_null(), "Attempted to call by-value method with object pointer");
        let deserialized_args = bincode::deserialize(args).expect("Failed to decode args");
        bincode::serialize_into(ret, &self.call(deserialized_args)).expect("Failed to encode result")
    }
}

impl<T: 'static + Copy + Send + Sync + CallBorrowRef> EguiFnRefInvokable for T
where T::Input: 'static + DeserializeOwned, T::Output: Serialize
{
    unsafe fn invoke(&self, ptr: *mut (), args: &[u8], ret: &mut Vec<u8>) {
        let deserialized_args = bincode::deserialize(args).expect("Failed to decode args");
        bincode::serialize_into(ret, &self.call(&mut *ptr.cast(), deserialized_args)).expect("Failed to encode result")
    }
}

/// Implements [`CallBorrow`] for every possible combination of by-value and by-reference parameters.
macro_rules! impl_call_borrow {
    ({ $($ty_name:ident,)* }, { $($arg_name:ident,)* }) => {
        impl_call_borrow!({ $($ty_name,)* }, { $($arg_name,)* }, { }, { }, { }, { }, { });
    };
    ({ }, { }, { $($bounds: tt)* }, { $($args: tt)* }, { $($input_tys: tt)* }, { $($arg_names: tt)* }, { $($arg_borrows: tt )* }) => {
        impl<$($bounds)* R> CallBorrow for fn($($args)*) -> R {
            type Input = ($($input_tys)*);
            type Output = R;

            fn call(&self, ($($arg_names)*): Self::Input) -> Self::Output {
                self($($arg_borrows)*)
            }
        }

        impl<P, $($bounds)* R> CallBorrowRef for fn(&P, $($args)*) -> R {
            type Input = ($($input_tys)*);
            type Output = R;
            type Reference = P;

            fn call(&self, reference: &mut Self::Reference, ($($arg_names)*): Self::Input) -> Self::Output {
                self(reference, $($arg_borrows)*)
            }
        }

        impl<P, $($bounds)* R> CallBorrowRef for fn(&mut P, $($args)*) -> R {
            type Input = ($($input_tys)*);
            type Output = R;
            type Reference = P;

            fn call(&self, reference: &mut Self::Reference, ($($arg_names)*): Self::Input) -> Self::Output {
                self(reference, $($arg_borrows)*)
            }
        }
    };
    ({ $first_ty_name:ident, $($rest_ty_name:ident,)* }, { $first_arg_name:ident, $($rest_arg_name:ident,)* }, { $($bounds: tt)* }, { $($args: tt)* }, { $($input_tys: tt)* }, { $($arg_names: tt)* }, { $($arg_borrows: tt)* }) => {
        impl_call_borrow!({ $($rest_ty_name,)* }, { $($rest_arg_name,)* }, { $first_ty_name, $($bounds)* }, { $first_ty_name, $($args)* }, { $first_ty_name, $($input_tys)* }, { $first_arg_name, $($arg_names)* }, { $first_arg_name, $($arg_borrows)* });
        impl_call_borrow!({ $($rest_ty_name,)* }, { $($rest_arg_name,)* }, { $first_ty_name: ?Sized + ToOwned, $($bounds)* }, { &$first_ty_name, $($args)* }, { $first_ty_name::Owned, $($input_tys)* }, { $first_arg_name, $($arg_names)* }, { $first_arg_name.borrow(), $($arg_borrows)* });
    };
}

/// A trait that allows for passing *values* to a function, some of which
/// that function may take by immutable reference.
trait CallBorrow {
    /// A tuple containing the arguments for the function.
    type Input;
    /// The return type of the function.
    type Output;

    /// Invokes the function.
    fn call(&self, args: Self::Input) -> Self::Output;
}

impl<R> CallBorrow for fn() -> R {
    type Input = ();
    type Output = R;

    fn call(&self, (): Self::Input) -> Self::Output {
        self()
    }
}

/// A trait that allows for passing *values* to a function, some of which
/// that function may take by immutable reference.
/// The function acts on a reference type.
trait CallBorrowRef {
    /// A tuple containing the arguments for the function.
    type Input;
    /// The return type of the function.
    type Output;
    /// The type that will be passed by reference for the call.
    type Reference;

    /// Invokes the function.
    fn call(&self, reference: &mut Self::Reference, args: Self::Input) -> Self::Output;
}

impl<P, R> CallBorrowRef for fn(&P) -> R {
    type Input = ();
    type Output = R;
    type Reference = P;

    fn call(&self, reference: &mut Self::Reference, (): Self::Input) -> Self::Output {
        self(reference)
    }
}

impl<P, R> CallBorrowRef for fn(&mut P) -> R {
    type Input = ();
    type Output = R;
    type Reference = P;

    fn call(&self, reference: &mut Self::Reference, (): Self::Input) -> Self::Output {
        self(reference)
    }
}

impl_call_borrow!({ A0, }, { arg_0, });
impl_call_borrow!({ A0, A1, }, { arg_0, arg_1, });
impl_call_borrow!({ A0, A1, A2, }, { arg_0, arg_1, arg_2, });
impl_call_borrow!({ A0, A1, A2, A3, }, { arg_0, arg_1, arg_2, arg_3, });
impl_call_borrow!({ A0, A1, A2, A3, A4, }, { arg_0, arg_1, arg_2, arg_3, arg_4, });

/// Functions that can be run as tests.
#[cfg(test)]
mod tests {
    use super::*;
    
    /// Creates a list of all unbound methods and stubs for them. 
    #[test]
    fn report_unbound_methods() {
        let mut result = String::new();
        let mut bound = 0;

        for func in EguiFn::ALL {
            if EGUI_FNS.inner[*func as usize].is_none() {
                result += &format!("{func:?}\n");
            }
            else {
                bound += 1;
            }
        }
        
        result = format!("{bound} / {} ({}%) bound\n{result}", EguiFn::ALL.len(), (100.0 * bound as f32 / EguiFn::ALL.len() as f32).floor());
        std::fs::write("progress_report.txt", result).expect("Failed to write progress report");
    }
}